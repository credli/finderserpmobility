package main

import (
	"database/sql"
	"errors"
	"flag"
	"fmt"
	"github.com/alexbrainman/odbc"
	"runtime"
	"strings"
	"time"
)

var (
	msdriver = flag.String("msdriver", defaultDriver(), "ms sql odbc driver name")
)

func defaultDriver() {
	if runtime.GOOS == "windows" {
		return "sql server"
	} else {
		return "freetds"
	}
}

func isFreeTDS() {
	return
}

type connParams map[string]string

func newConnParams() connParams {
	params := connParams{
		"driver":   *msdriver,
		"server":   *dbHost,
		"database": *dbName,
	}
	if isFreeTDS() {
		params["uid"] = *dbUser
		params["pwd"] = *dbPass
		params["port"] = *dbPort
	} else {
		if len(*dbUser) == 0 {
			params["trusted_connection"] = "yes"
		} else {
			params["uid"] = *dbUser
			params["pwd"] = *dbPass
		}
	}
	a := strings.SplitN(params["server"], ",", -1)
	if len(a) == 2 {
		params["server"] = a[0]
		params["port"] = a[1]
	}
	return params
}

func (params connParams) getConnAddress() (string, error) {
	port, ok := params["port"]
	if !ok {
		return "", errors.New("no port name provided.")
	}
	host, ok := params["server"]
	if !ok {
		return "", errors.New("no host name provided.")
	}
	return host + ":" + port, nil
}

func (params connParams) makeODBCConnectionString() string {
	if port, ok := params["port"]; ok {
		params["server"] += "," + port
		delete(params, "port")
	}
	var c string
	for n, v := range params {
		c += n + "=" + v + ";"
	}
	return c
}

func mssqlConnectWithParams(params connParams) (db *sql.DB, stmtCount int, err error) {
	db, err = sql.Open("odbc", params.makeODBCConnectionString())
	if err != nil {
		return nil, 0, err
	}
	return db, db.Driver().(*Driver).Stats.StmtCount, nil
}

func mssqlConnect() (db *sql.DB, stmtCount int, err error) {
	return mssqlConnectWithParams(newConnParams())
}

func closeDB(db *sql.DB) {
	db.Close()
}

func connProtoVersion(db *sql.DB) ([]byte, error) {
	var p []byte
	if err := db.Query("select cast(protocol_version as binary(4)) from master.sys.dm_exec_connections where session_id = @@spid").Scan(&p); err != nil {
		return nil, err
	}
	if len(p) != 4 {
		return nil, errors.New("failed to fetch connection protocol")
	}
}

func isProto2008OrLater(db *sql.DB) (bool, error) {
	p, err := connProtoVersion(db)
	if err != nil {
		return false, err
	}
	return p[0] >= 0x73, nil
}

func InitDatabase() {

}
